name: Terraform Plan and Comment

on:
  pull_request:
  push:
    branches-ignore:
      - main

jobs:
  terraform-update-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_SA }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_SA }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -out=plan.out
        terraform show -json plan.out > plan.json
        cat plan.out
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.TERRAFORM_SA }}

    - name: list files
      if: github.event_name == 'pull_request'
      run: ls -la

    - name: diff
      if: github.event_name == 'pull_request'
      run: docker run --rm -v "$(pwd):/src" hahomdal/rover -genImage=true -planJSONPath=plan.json
        
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          //const exec = require('@actions/exec');
          //const core = require('@actions/core');

          let myOutput = '';
          let myError = '';

          const options = {};

          core.warning('TESTINGTESTINGTESTING');
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    #- name: Upload failed tests
    #  if: github.event_name == 'pull_request'
    #  uses: edunad/actions-image@v2.0.0
    #  with:
    #    path: './*.svg'
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #    title: 'Failed E2E tests 🙀'
        # annotationLevel: 'failure'
      #      run: |
      #  PLAN=$(terraform plan)
      #  echo "$PLAN" > plan.txt

      #    - name: Add Plan as PR Comment
      #if: github.event_name == 'pull_request'
      #run: |
      #  PR_ID=$(gh pr view https://github.com/${{ github.repository }}/pull/${{ github.event.pull_request.number }} --json number -q ".number")
      #  gh pr comment $PR_ID --body "Terraform Plan Output:\n\`\`\`\n$(cat plan.txt)\n\`\`\`"
